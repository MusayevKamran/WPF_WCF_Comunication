//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfClient.WcfService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Line", Namespace="http://schemas.datacontract.org/2004/07/WebSocket.Services.Contracts")]
    [System.SerializableAttribute()]
    public partial class Line : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short LINEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MAKTXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MATNRField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short LINE {
            get {
                return this.LINEField;
            }
            set {
                if ((this.LINEField.Equals(value) != true)) {
                    this.LINEField = value;
                    this.RaisePropertyChanged("LINE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MAKTX {
            get {
                return this.MAKTXField;
            }
            set {
                if ((object.ReferenceEquals(this.MAKTXField, value) != true)) {
                    this.MAKTXField = value;
                    this.RaisePropertyChanged("MAKTX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MATNR {
            get {
                return this.MATNRField;
            }
            set {
                if ((object.ReferenceEquals(this.MATNRField, value) != true)) {
                    this.MATNRField = value;
                    this.RaisePropertyChanged("MATNR");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService.ILineService", CallbackContract=typeof(WpfClient.WcfService.ILineServiceCallback))]
    public interface ILineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/SendLine", ReplyAction="http://tempuri.org/ILineService/SendLineResponse")]
        void SendLine(WpfClient.WcfService.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/SendLine", ReplyAction="http://tempuri.org/ILineService/SendLineResponse")]
        System.Threading.Tasks.Task SendLineAsync(WpfClient.WcfService.Line line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/SubscribeForLine", ReplyAction="http://tempuri.org/ILineService/SubscribeForLineResponse")]
        void SubscribeForLine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/SubscribeForLine", ReplyAction="http://tempuri.org/ILineService/SubscribeForLineResponse")]
        System.Threading.Tasks.Task SubscribeForLineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/UnsubscribeForLine", ReplyAction="http://tempuri.org/ILineService/UnsubscribeForLineResponse")]
        void UnsubscribeForLine();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/UnsubscribeForLine", ReplyAction="http://tempuri.org/ILineService/UnsubscribeForLineResponse")]
        System.Threading.Tasks.Task UnsubscribeForLineAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/GetLinesId", ReplyAction="http://tempuri.org/ILineService/GetLinesIdResponse")]
        short[] GetLinesId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/GetLinesId", ReplyAction="http://tempuri.org/ILineService/GetLinesIdResponse")]
        System.Threading.Tasks.Task<short[]> GetLinesIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/GetSelectedLine", ReplyAction="http://tempuri.org/ILineService/GetSelectedLineResponse")]
        WpfClient.WcfService.Line GetSelectedLine(string line);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILineService/GetSelectedLine", ReplyAction="http://tempuri.org/ILineService/GetSelectedLineResponse")]
        System.Threading.Tasks.Task<WpfClient.WcfService.Line> GetSelectedLineAsync(string line);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILineServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILineService/OnLineSend")]
        void OnLineSend(WpfClient.WcfService.Line line);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILineServiceChannel : WpfClient.WcfService.ILineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LineServiceClient : System.ServiceModel.DuplexClientBase<WpfClient.WcfService.ILineService>, WpfClient.WcfService.ILineService {
        
        public LineServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LineServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LineServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendLine(WpfClient.WcfService.Line line) {
            base.Channel.SendLine(line);
        }
        
        public System.Threading.Tasks.Task SendLineAsync(WpfClient.WcfService.Line line) {
            return base.Channel.SendLineAsync(line);
        }
        
        public void SubscribeForLine() {
            base.Channel.SubscribeForLine();
        }
        
        public System.Threading.Tasks.Task SubscribeForLineAsync() {
            return base.Channel.SubscribeForLineAsync();
        }
        
        public void UnsubscribeForLine() {
            base.Channel.UnsubscribeForLine();
        }
        
        public System.Threading.Tasks.Task UnsubscribeForLineAsync() {
            return base.Channel.UnsubscribeForLineAsync();
        }
        
        public short[] GetLinesId() {
            return base.Channel.GetLinesId();
        }
        
        public System.Threading.Tasks.Task<short[]> GetLinesIdAsync() {
            return base.Channel.GetLinesIdAsync();
        }
        
        public WpfClient.WcfService.Line GetSelectedLine(string line) {
            return base.Channel.GetSelectedLine(line);
        }
        
        public System.Threading.Tasks.Task<WpfClient.WcfService.Line> GetSelectedLineAsync(string line) {
            return base.Channel.GetSelectedLineAsync(line);
        }
    }
}
